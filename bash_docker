#!/bin/bash

# Docker aliases and functions

alias dc="docker container"
alias dcl="dc ls"
alias dcs="dc start"
alias di="docker image"
alias dil="di ls"
alias dl="docker logs"

alias dsc="scratchpad scratchpad-centos7 centos:centos7"
alias dsb="scratchpad scratchpad-bionic ubuntu:bionic"
alias dsf="scratchpad scratchpad-focal ubuntu:focal"
alias dss="scratchpad scratchpad-opensuse-leap opensuse/leap:15.3"
alias dso="scratchpad scratchpad-oracle-8 oraclelinux:8"

declare -A last_container_data
declare -a d_cmd_options
declare -a d_cmd_rest

# dlname - print name of most recently started container.
dlname() {
  fetch_last_container_data

  echo "${last_container_data['name']}"
}

dlstop() {
  fetch_last_container_data

  echo "Container: ${last_container_data['image']} (${last_container_data['name']})"
  echo -n "Stop container? y/N "
  read -r response
  if [[ "$response" =~ Y|y ]]; then
    docker stop "${last_container_data['name']}"
  fi
}

# delast - docker exec the last started container.
function delast() {
  # Move options (e.g. --user) to $options array.
  gobble_options "$@"
  fetch_last_container_data

  echo "${last_container_data['image']}"
  de "${d_cmd_options[@]}" "${last_container_data['name']}" "${d_cmd_rest[*]}"
}

# derlast - docker exec the last started container with root user.
alias derlast="delast -u=root"

# de - docker exec shortcut.
# Passing options that take arguments:
# --user=root
# The argument must be used without whitespace!
function de() {
  gobble_options "$@"

  set -- "${d_cmd_rest[@]}"
  local container="$1"
  shift

  if [[ -z "$*" ]]; then
    echo docker exec -it "${d_cmd_options[@]}" "$container" /bin/bash
    docker exec -it "${d_cmd_options[@]}" "$container" /bin/bash
  else
    echo docker exec -it "${d_cmd_options[@]}" "$container" \
      /bin/bash -c "$*"
    docker exec -it "${d_cmd_options[@]}" "$container" \
      /bin/bash -c  "$*"
  fi
}
alias der="de --user=root"

# dr - docker run.
#
# dr ubuntu:bionic
#   => docker run -it --rm ubuntu:bionic bash
# dr ubuntu:bionic ls /bin
#   => docker run -it --rm ubuntu:bionic ls /bin
function dr() {
  gobble_options "$@"
  set -- "${d_cmd_rest[@]}"

  local image="$1"
  shift
  local cmd
  if [ $# -gt 1 ]; then
    cmd=("$@")
  else
    cmd=("${1:-/bin/bash}")
  fi

  # --entrypoint was passed instead of cmd.
  if (echo "${d_cmd_options[@]}" | grep -q -P -- '--entrypoint'); then
    echo docker run -it --rm "${d_cmd_options[@]}" "$image"
    docker run -it --rm "${d_cmd_options[@]}" "$image"
    return
  fi

  # Use cmd.
  echo docker run -it --rm "${options[@]}" "$image" "${cmd[@]}"
  docker run -it --rm "${options[@]}" "$image" "${cmd[@]}"
}

# dreb - docker run with entrypoint of bash.
#
# dreb ubuntu:bionic
#  Pass --entrypoint=/bin/bash to dr.
# dreb --user=1000 ubuntu:bionic
#  Pass --entrypoint=/bin/bash to dr and use USER 1000.
alias dreb="dr --entrypoint=/bin/bash"
alias drreb="dreb -u=root"

fetch_last_container_data() {
  local name_and_image;
  mapfile -t name_and_image < \
    <(docker container ls -l --format "{{.Names}}\\n{{.Image}}")

  last_container_data['name']=${name_and_image[0]}
  last_container_data['image']=${name_and_image[1]}
}

gobble_options() {
  # Move options (e.g. --user) to $options array.
  local option
  local options=()
  for option in "$@"; do
    if [[ "${option:0:1}" != "-" ]]; then
      break
    fi

    options+=("$option")
    shift
  done

  d_cmd_options=("${options[@]}")
  d_cmd_rest=("$@")
}
